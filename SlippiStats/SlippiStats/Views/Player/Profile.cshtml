@model PlayerProfileViewModel

@{
    ViewData["Title"] = "Player List Page";
}

<div class="section-filters">
    <h3>Stats Overview - @Model.Player.Name - @Model.Player.ConnectCode</h3>
    <form class="form-standard" method="post">
    </form>
</div>

<div class="profile-overview">
    <div class="profile-matchups">
        <table class="table-matchups">
            <thead>
                <tr>
                    <th></th>
                    <th />
                    @foreach (Character character in Model.Characters)
                    {
                        if (character.GetTournamentLegality())
                        {
                            <th><img src="@character.GetStockIconPath()" /></th>
                        }
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (Character character in Model.PlayedCharacters)
                {
                    if (character.GetTournamentLegality())
                    {
                        <tr>
                            <td>@Model.MatchupResults.Where(mr => mr.Character == character).Sum(mr => mr.GamesPlayed)</td>
                            <td><img src="@character.GetStockIconPath()" /></td>
                            @foreach (Character opponentCharacter in Model.Characters)
                            {
                                if (opponentCharacter.GetTournamentLegality())
                                {
                                    <td id="@(character)-@(opponentCharacter)">@Model.MatchupResults.Where(mr => mr.Character == character && mr.OpponentCharacter == opponentCharacter).FirstOrDefault()?.GamesPlayed</td>
                                }
                            }
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<table class="table-primary">
    <thead>
        <tr>
            <th class="align-left">Id</th>
            <th class="align-left">Player 1</th>
            <th class="align-left"></th>
            <th class="align-left">Player 2</th>
            <th class="align-left"></th>
            <th class="align-left">Stage</th>
            <th class="align-left"></th>
            <th class="align-left">File Name</th>
        </tr>
    </thead>
    <tbody>
        @foreach (Game game in Model.Games.Take(100))
        {
            <tr>
                <td class="align-left">@game.Id</td>
                <td class="align-left">@game.Player1Id</td>
                <td class="align-left">@game.Character1.GetDisplayName()</td>
                <td class="align-left">@game.Player2Id</td>
                <td class="align-left">@game.Character2.GetDisplayName()</td>
                <td class="align-left">@game.Stage.GetDisplayName()</td>
                <td class="align-left">@game.GameMode?.GetDisplayName()</td>
                <td class="align-left">@game.FileName</td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
    <script>


    getBlendedColor(50, 100, '#00FF00');

    function getBlendedColor(numerator, denominator, color) {

        let red = parseInt(color.substring(1, 3), 16);
        let green = parseInt(color.substring(3, 5), 16);
        let blue = parseInt(color.substring(5, 7), 16);

        let blendedRed = Math.ceil(red * numerator / denominator).toString(16);
        let blendedGreen = Math.ceil(green * numerator / denominator).toString(16);
        let blendedBlue = Math.ceil(red * numerator / denominator).toString(16);

        let blendedColor = '#' + (blendedRed < 10 ? '0' + blendedRed : blendedRed) + (blendedGreen < 10 ? '0' + blendedGreen : blendedGreen) + (blendedBlue < 10 ? '0' + blendedBlue : blendedBlue);

        return blendedColor;
    }

    let mostCommonMatchup = @Model.MatchupResults.OrderByDescending(mr => mr.GamesPlayed).First().GamesPlayed;
    @foreach (Character character in Model.Characters)
    {
        foreach (Character opponentCharacter in Model.Characters)
        {
            if (Model.MatchupResults.Where(mr => mr.Character == character && mr.OpponentCharacter == opponentCharacter).FirstOrDefault() != null)
            {
            <text>
                $('#@character-@opponentCharacter').css('background-color', getBlendedColor(@Model.MatchupResults.Where(mr => mr.Character == character && mr.OpponentCharacter == opponentCharacter).FirstOrDefault().GamesPlayed, mostCommonMatchup, '#00FF00'));
            </text>
            }
        }
    }

    </script>
}